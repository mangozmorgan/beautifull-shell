
download_themes() {
    print_step "T√©l√©chargement des th√®mes Oh My Posh..."
    
    # Cr√©er le dossier themes
    mkdir -p "$OMP_THEMES_DIR"
    
    # T√©l√©charger les th√®mes depuis le repo officiel
    local themes_url="https://github.com/JanDeDobbeleer/oh-my-posh/archive/refs/heads/main.zip"
    local temp_dir=$(mktemp -d)
    
    print_info "T√©l√©chargement des th√®mes officiels..."
    if wget -q --show-progress "$themes_url" -O "$temp_dir/themes.zip"; then
        unzip -q "$temp_dir/themes.zip" -d "$temp_dir"
        
        # Copier uniquement les fichiers de th√®mes
        if [ -d "$temp_dir/oh-my-posh-main/themes" ]; then
            cp "$temp_dir/oh-my-posh-main/themes"/*.omp.json "$OMP_THEMES_DIR/" 2>/dev/null
            
            # V√©rifier qu'au moins quelques th√®mes ont √©t√© copi√©s
            local theme_count=$(ls "$OMP_THEMES_DIR"/*.omp.json 2>/dev/null | wc -l)
            if [ "$theme_count" -gt 0 ]; then
                print_success "Th√®mes t√©l√©charg√©s ($theme_count th√®mes) dans $OMP_THEMES_DIR"
            else
                print_warning "Aucun th√®me trouv√©, cr√©ation d'un th√®me par d√©faut"
                create_default_theme
            fi
        else
            print_warning "Structure de th√®mes non trouv√©e, cr√©ation d'un th√®me par d√©faut"
            create_default_theme
        fi
        
        rm -rf "$temp_dir"
    else
        print_warning "√âchec du t√©l√©chargement des th√®mes, cr√©ation d'un th√®me par d√©faut"
        create_default_theme
    fi
}

create_default_theme() {
    # Cr√©er un th√®me simple qui fonctionne toujours
    cat > "$OMP_THEMES_DIR/default.omp.json" << 'EOF'
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "version": 2,
  "final_space": true,
  "blocks": [
    {
      "type": "prompt",
      "alignment": "left",
      "segments": [
        {
          "type": "session",
          "style": "diamond",
          "leading_diamond": "",
          "trailing_diamond": "",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "background": "#c#!/bin/bash

# =============================================================================
# TERMINAL DEV SETUP - Installation compl√®te Kitty + Oh My Posh (LINUX)
# =============================================================================

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m' # No Color

# Variables globales
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="$SCRIPT_DIR/setup.log"
KITTY_CONFIG_DIR="$HOME/.config/kitty"
OMP_THEMES_DIR="$HOME/.cache/oh-my-posh/themes"

# =============================================================================
# FONCTIONS D'AFFICHAGE
# =============================================================================

print_header() {
    clear
    echo ""
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${NC}                    ${CYAN}ü¶ä${NC} ${WHITE}${BOLD}TERMINAL DEV SETUP${NC}                    ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïë${NC}                  ${DIM}Installation automatis√©e${NC}                  ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

print_step() {
    echo -e "${BLUE}[√âTAPE]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCC√àS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERREUR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[ATTENTION]${NC} $1"
}

print_info() {
    echo -e "${CYAN}[INFO]${NC} $1"
}

# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

check_sudo() {
    if [[ $EUID -eq 0 ]]; then
        print_error "Ne pas ex√©cuter ce script en tant que root"
        print_info "Ex√©cutez avec votre utilisateur normal, sudo sera demand√© si n√©cessaire"
        exit 1
    fi
}

detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        DISTRO=$ID
        VERSION=$VERSION_ID
    else
        print_error "Impossible de d√©tecter la distribution Linux"
        exit 1
    fi
    
    print_info "Distribution d√©tect√©e : $PRETTY_NAME"
}

check_dependencies() {
    print_step "V√©rification des d√©pendances..."
    
    # Commandes requises
    local deps=("curl" "wget" "unzip" "git" "jq" "fc-cache")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -ne 0 ]; then
        print_warning "D√©pendances manquantes : ${missing[*]}"
        print_step "Installation des d√©pendances..."
        
        case $DISTRO in
            ubuntu|debian)
                sudo apt update && sudo apt install -y curl wget unzip git jq fontconfig
                ;;
            fedora)
                sudo dnf install -y curl wget unzip git jq fontconfig
                ;;
            arch)
                sudo pacman -S --noconfirm curl wget unzip git jq fontconfig
                ;;
            *)
                print_error "Distribution non support√©e pour l'installation automatique"
                print_info "Installez manuellement : curl wget unzip git jq fontconfig"
                exit 1
                ;;
        esac
    fi
    
    print_success "D√©pendances v√©rifi√©es"
}

# =============================================================================
# INSTALLATION POLICES NERD FONTS
# =============================================================================

install_fonts() {
    print_step "Installation des polices Nerd Fonts..."
    
    local font_dir="$HOME/.local/share/fonts"
    mkdir -p "$font_dir"
    
    # T√©l√©charger JetBrains Mono Nerd Font
    local temp_dir=$(mktemp -d)
    local font_url="https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.zip"
    
    print_info "T√©l√©chargement de JetBrains Mono Nerd Font..."
    if wget -q --show-progress "$font_url" -O "$temp_dir/JetBrainsMono.zip"; then
        print_info "Extraction des polices..."
        unzip -q "$temp_dir/JetBrainsMono.zip" -d "$temp_dir/JetBrainsMono"
        
        # Copier uniquement les fichiers TTF (pas les OTF pour √©viter les conflits)
        find "$temp_dir/JetBrainsMono" -name "JetBrainsMonoNerdFont-*.ttf" -exec cp {} "$font_dir/" \;
        
        # V√©rifier qu'au moins une police a √©t√© copi√©e
        if ls "$font_dir"/JetBrainsMonoNerdFont-*.ttf 1> /dev/null 2>&1; then
            print_info "Mise √† jour du cache des polices..."
            fc-cache -fv "$font_dir" >/dev/null 2>&1
            
            # V√©rifier que la police est bien install√©e
            if fc-list | grep -q "JetBrainsMono Nerd Font"; then
                print_success "Polices Nerd Fonts install√©es et d√©tect√©es"
            else
                print_warning "Police install√©e mais non d√©tect√©e par fontconfig"
            fi
        else
            print_error "Aucune police JetBrains Mono trouv√©e dans l'archive"
            return 1
        fi
        
        # Nettoyage
        rm -rf "$temp_dir"
    else
        print_error "√âchec du t√©l√©chargement des polices"
        return 1
    fi
}

# =============================================================================
# INSTALLATION OH-MY-POSH
# =============================================================================

install_oh_my_posh() {
    print_step "Installation d'Oh My Posh..."
    
    # V√©rifier si d√©j√† install√©
    if command -v oh-my-posh &> /dev/null; then
        print_warning "Oh My Posh est d√©j√† install√©"
        return 0
    fi
    
    # Installation via le script officiel
    print_info "T√©l√©chargement et installation d'Oh My Posh..."
    if curl -s https://ohmyposh.dev/install.sh | bash -s; then
        
        # Ajouter au PATH dans le .bashrc si n√©cessaire
        local omp_path="$HOME/.local/bin"
        if [[ ":$PATH:" != *":$omp_path:"* ]]; then
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.bashrc"
        fi
        
        # Recharger le PATH pour cette session
        export PATH="$HOME/.local/bin:$PATH"
        
        print_success "Oh My Posh install√© avec succ√®s"
        log "Oh My Posh install√©"
    else
        print_error "√âchec de l'installation d'Oh My Posh"
        exit 1
    fi
}

download_themes() {
    print_step "T√©l√©chargement des th√®mes Oh My Posh..."
    
    # Cr√©er le dossier themes
    mkdir -p "$OMP_THEMES_DIR"
    
    # T√©l√©charger les th√®mes depuis le repo officiel
    local themes_url="https://github.com/JanDeDobbeleer/oh-my-posh/archive/refs/heads/main.zip"
    local temp_dir=$(mktemp -d)
    
    print_info "T√©l√©chargement des th√®mes officiels..."
    if wget -q "$themes_url" -O "$temp_dir/themes.zip"; then
        unzip -q "$temp_dir/themes.zip" -d "$temp_dir"
        
        # Copier uniquement les fichiers de th√®mes
        if [ -d "$temp_dir/oh-my-posh-main/themes" ]; then
            cp "$temp_dir/oh-my-posh-main/themes"/*.omp.json "$OMP_THEMES_DIR/" 2>/dev/null
            print_success "Th√®mes t√©l√©charg√©s dans $OMP_THEMES_DIR"
        else
            print_warning "Structure de th√®mes non trouv√©e, utilisation du th√®me par d√©faut"
        fi
        
        rm -rf "$temp_dir"
    else
        print_warning "√âchec du t√©l√©chargement des th√®mes, utilisation du th√®me par d√©faut"
    fi
}

# =============================================================================
# INSTALLATION KITTY
# =============================================================================

install_kitty() {
    print_step "Installation de Kitty Terminal..."
    
    # V√©rifier si d√©j√† install√©
    if command -v kitty &> /dev/null; then
        print_warning "Kitty est d√©j√† install√©"
        return 0
    fi
    
    print_info "Installation de Kitty selon la distribution..."
    
    case $DISTRO in
        ubuntu|debian)
            # Ubuntu/Debian - utiliser le PPA ou le script officiel
            if ! sudo apt install -y kitty; then
                print_info "Installation via le script officiel..."
                curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
                
                # Cr√©er un lien symbolique dans /usr/local/bin
                sudo ln -sf "$HOME/.local/kitty.app/bin/kitty" /usr/local/bin/kitty
            fi
            ;;
        fedora)
            sudo dnf install -y kitty
            ;;
        arch)
            sudo pacman -S --noconfirm kitty
            ;;
        *)
            print_info "Installation via le script officiel..."
            curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
            
            # Cr√©er un lien symbolique dans /usr/local/bin
            sudo ln -sf "$HOME/.local/kitty.app/bin/kitty" /usr/local/bin/kitty
            ;;
    esac
    
    print_success "Kitty install√©"
}

# =============================================================================
# CONFIGURATION KITTY
# =============================================================================

configure_kitty() {
    print_step "Configuration de Kitty..."
    
    # Cr√©er le dossier de configuration
    mkdir -p "$KITTY_CONFIG_DIR"
    
    # Cr√©er le fichier de configuration kitty.conf avec le th√®me Catppuccin
    cat > "$KITTY_CONFIG_DIR/kitty.conf" << 'EOF'
# THEME KITTY - Catppuccin Mocha (Configuration corrig√©e)
# vim:ft=kitty

# Police - Configuration corrig√©e pour √©viter les erreurs
font_family      JetBrainsMonoNerdFont-Regular
bold_font        JetBrainsMonoNerdFont-Bold
italic_font      JetBrainsMonoNerdFont-Italic
bold_italic_font JetBrainsMonoNerdFont-BoldItalic
font_size        11.0

# Fallback si Nerd Font non trouv√©e
# font_family      monospace

# Apparence
background_opacity         0.95
confirm_os_window_close    0

# Couleurs Catppuccin Mocha
# text
foreground           #cdd6f4
# base
background           #1e1e2e
# selection
selection_foreground #1e1e2e
selection_background #f5e0dc

# Couleurs normales
color0  #45475a
color1  #f38ba8
color2  #a6e3a1
color3  #f9e2af
color4  #89b4fa
color5  #f5c2e7
color6  #94e2d5
color7  #bac2de

# Couleurs brillantes
color8  #585b70
color9  #f38ba8
color10 #a6e3a1
color11 #f9e2af
color12 #89b4fa
color13 #f5c2e7
color14 #94e2d5
color15 #a6adc8

# Curseur
cursor                     #f5e0dc
cursor_text_color          #1e1e2e
cursor_shape               block
cursor_blink_interval      0.5

# Scrollback
scrollback_lines           10000
scrollback_pager           less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

# URLs
url_color                  #89b4fa
url_style                  curly
open_url_with              default

# Raccourcis clavier
map ctrl+shift+c           copy_to_clipboard
map ctrl+shift+v           paste_from_clipboard
map ctrl+shift+f5          load_config_file
map ctrl+shift+equal       change_font_size all +1.0
map ctrl+shift+minus       change_font_size all -1.0
map ctrl+shift+backspace   change_font_size all 0

# PERSONAL SHORTCUTS
map ctrl+c copy_and_clear_or_interrupt
map ctrl+v paste_from_clipboard

# PERSONAL CONFIG
# Taille de la fen√™tre au d√©marrage
initial_window_width 100c
initial_window_height 30c

# Padding de la fen√™tre
window_padding_width 10 10 10 10

# Position de la fen√™tre (optionnel)
initial_window_x 100
initial_window_y 100

# Emp√™cher la maximisation automatique
remember_window_size no

# Shell de d√©marrage
shell_integration          enabled
EOF

    # Cr√©er le script startup.sh personnalis√©
    cat > "$KITTY_CONFIG_DIR/startup.sh" << 'EOF'
#!/bin/bash

# Nettoyer l'√©cran
clear
printf "\033[2J\033[H"

# Variables
TERM_WIDTH=$(tput cols 2>/dev/null || echo 80)
CONTENT_WIDTH=$((TERM_WIDTH - 4))

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
ORANGE='\033[0;33m'
PINK='\033[1;35m'
GRAY='\033[0;90m'
WHITE='\033[1;37m'
NC='\033[0m'
BOLD='\033[1m'
DIM='\033[2m'

# Banni√®re personnalis√©e
get_padding() {
    local term_width=$(tput cols)
    local content_width=35
    echo $(( (term_width - content_width) / 2 ))
}

padding=$(get_padding)
spaces=$(printf "%*s" $padding "")
USERNAME=$(whoami | tr '[:lower:]' '[:upper:]')

echo ""
echo -e "${spaces}${ORANGE}ü¶ä${NC} ${WHITE}${BOLD}TERMINAL DEV ${USERNAME}${NC} ${ORANGE}ü¶ä${NC}"
echo -e "${spaces}${DIM}${GRAY}Intelligent ‚Ä¢ Rapide ‚Ä¢ Fiable${NC}"
echo ""
echo ''

# Infos syst√®me avec ic√¥nes et couleurs
USER_INFO="${USER}@$(hostname)"
OS_INFO=$(lsb_release -d 2>/dev/null | cut -f2 || uname -o)
KERNEL_INFO=$(uname -r)
UPTIME_INFO=$(uptime -p 2>/dev/null | sed 's/up //' || echo "Indisponible")
SHELL_INFO=$(basename $SHELL)

echo -e "  ${CYAN}üë§${NC} ${WHITE}Utilisateur   ${GRAY}‚Üí${NC}  ${YELLOW}${USER_INFO}${NC}"
echo -e "  ${CYAN}üöÄ${NC} ${WHITE}Ready to code   ${GRAY}‚Üí${NC}  Tapez '${YELLOW}aide${NC}' pour plus de commandes"

# Git info si dans un repo
if git rev-parse --git-dir > /dev/null 2>&1; then
    BRANCH=$(git branch --show-current)
    CHANGES=$(git status --porcelain | wc -l)
    echo -e "  ${PINK}üîó${NC} ${WHITE}Git Branch    ${GRAY}‚Üí${NC}  ${YELLOW}${BRANCH}${NC} ${GRAY}(${CHANGES} modifications)${NC}"
fi

echo ""

# Citations en fran√ßais
QUOTES=(
    "R√©soudre d'abord le probl√®me. Puis, √©crire le code."
    "Le code est de la po√©sie √©crite en logique."
    "Un code propre semble avoir √©t√© √©crit par quelqu'un qui s'en soucie."
    "La programmation, c'est d√©couvrir ce qu'on peut faire."
)

RANDOM_QUOTE=${QUOTES[$RANDOM % ${#QUOTES[@]}]}
echo -e "  ${DIM}${GRAY}üí≠ ${RANDOM_QUOTE}${NC}"
echo ""

# Initialiser Oh My Posh si disponible
if command -v oh-my-posh &> /dev/null; then
    # Utiliser un th√®me simple et robuste
    if [ -f "$HOME/.cache/oh-my-posh/themes/powerlevel10k_rainbow.omp.json" ]; then
        eval "$(oh-my-posh init bash --config '$HOME/.cache/oh-my-posh/themes/powerlevel10k_rainbow.omp.json')"
    elif [ -f "$HOME/.cache/oh-my-posh/themes/jandedobbeleer.omp.json" ]; then
        eval "$(oh-my-posh init bash --config '$HOME/.cache/oh-my-posh/themes/jandedobbeleer.omp.json')"
    else
        # Utiliser le th√®me par d√©faut int√©gr√© (plus stable)
        eval "$(oh-my-posh init bash)"
    fi
fi
EOF

    chmod +x "$KITTY_CONFIG_DIR/startup.sh"
    
    print_success "Configuration Kitty cr√©√©e"
}

# =============================================================================
# CONFIGURATION BASHRC
# =============================================================================

configure_bashrc() {
    print_step "Configuration du .bashrc..."
    
    # Backup du .bashrc existant
    if [ -f "$HOME/.bashrc" ]; then
        cp "$HOME/.bashrc" "$HOME/.bashrc.backup.$(date +%Y%m%d_%H%M%S)"
        print_info "Sauvegarde de .bashrc cr√©√©e"
    fi
    
    # Ajouter la configuration personnalis√©e √† .bashrc
    cat >> "$HOME/.bashrc" << 'EOF'

# =============================================================================
# CONFIG PERSO - TERMINAL DEV SETUP
# =============================================================================

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
ORANGE='\033[0;33m'
PINK='\033[1;35m'
GRAY='\033[0;90m'
WHITE='\033[1;37m'
NC='\033[0m'

# Styles
BOLD='\033[1m'
DIM='\033[2m'

# D√©marrage custom (uniquement pour les sessions interactives)
if [[ $- == *i* ]] && [[ -z "$STARTUP_DONE" ]]; then
    export STARTUP_DONE=1
    ~/.config/kitty/startup.sh
fi

# Fonction d'aide propre
aide() {
    echo ""
    echo -e "${WHITE}${BOLD}ü¶ä AIDE - COMMANDES DISPONIBLES${NC}"
    echo -e "${GRAY}‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî${NC}"
    echo -e "  ${GREEN}Navigation :${NC} proj, web, util, home"
    echo -e "  ${PURPLE}Git :${NC} gs (status), ga (add), gc (commit), gp (push)"
    echo -e "  ${BLUE}Syst√®me :${NC} ll, ports, myip, cpu"
    echo -e "  ${YELLOW}${DIM}Tips :"
    echo -e "  ${GRAY}${DIM}Pour modifier/ajouter des alias, rendez-vous dans le fichier .bashrc"
    echo -e "  Vous pouvez choisir votre th√®me oh-my-posh parmis le large choix disponible sur leur site"
    echo ""
}

# Aliases personnalis√©s pour les raccourcis
alias ll='ls -alF --color=auto'
alias ports='sudo netstat -tuln'
alias myip='curl -s https://httpbin.org/ip | jq -r .origin'
alias cpu='top -bn1 | grep "Cpu(s)" | awk "{print \$2}" | awk -F"%" "{print \$1}"'
alias home='cd ~'

# Aliases Git
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'

# Aliases de navigation
alias proj='cd ~/Documents/Projets'
alias web='cd ~/Documents/Projets'
alias util='cd ~/Documents/Utilitaires'
alias home='cd ~'

# Initialiser Oh My Posh si disponible
if command -v oh-my-posh &> /dev/null; then
    # Utiliser le th√®me agnoster ou un th√®me par d√©faut
    if [ -f "$HOME/.cache/oh-my-posh/themes/agnoster.omp.json" ]; then
        eval "$(oh-my-posh init bash --config '$HOME/.cache/oh-my-posh/themes/agnoster.omp.json')"
    else
        eval "$(oh-my-posh init bash)"
    fi
fi

EOF

    print_success "Configuration .bashrc mise √† jour"
}

# =============================================================================
# CONFIGURATION SYST√àME
# =============================================================================

set_default_terminal() {
    print_step "Configuration de Kitty comme terminal par d√©faut..."
    
    # Cr√©er le fichier .desktop pour Kitty si n√©cessaire
    local desktop_file="$HOME/.local/share/applications/kitty-custom.desktop"
    mkdir -p "$(dirname "$desktop_file")"
    
    cat > "$desktop_file" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Kitty Terminal Dev
Comment=Terminal rapide et configurable pour d√©veloppeurs
Exec=kitty
Icon=kitty
Terminal=false
Categories=System;TerminalEmulator;
StartupNotify=true
MimeType=application/x-shellscript;
EOF
    
    # Mettre √† jour la base de donn√©es des applications
    update-desktop-database "$HOME/.local/share/applications" 2>/dev/null || true
    
    # D√©finir Kitty comme terminal par d√©faut via update-alternatives (n√©cessite sudo)
    print_info "Configuration du terminal par d√©faut syst√®me..."
    if command -v update-alternatives >/dev/null 2>&1; then
        # V√©rifier si kitty est dans le PATH
        KITTY_PATH=$(which kitty 2>/dev/null || echo "/usr/bin/kitty")
        
        if [ -x "$KITTY_PATH" ]; then
            # Ajouter kitty aux alternatives et le d√©finir par d√©faut
            sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator "$KITTY_PATH" 100
            sudo update-alternatives --set x-terminal-emulator "$KITTY_PATH"
            print_success "Kitty d√©fini comme terminal par d√©faut syst√®me"
        else
            print_warning "Impossible de trouver l'ex√©cutable kitty"
        fi
    else
        print_warning "update-alternatives non disponible sur cette distribution"
    fi
    
    # Configuration GNOME si disponible
    if command -v gsettings >/dev/null 2>&1; then
        print_info "Configuration du terminal par d√©faut pour GNOME..."
        gsettings set org.gnome.desktop.default-applications.terminal exec 'kitty' 2>/dev/null || true
        gsettings set org.gnome.desktop.default-applications.terminal exec-arg '' 2>/dev/null || true
    fi
    
    print_success "Kitty configur√© dans les applications"
}

configure_hotkey() {
    print_step "Configuration du raccourci Super+T..."
    
    print_warning "Configuration manuelle requise pour Super+T :"
    
    case $DISTRO in
        ubuntu|debian)
            print_info "Ubuntu/Debian :"
            print_info "1. Param√®tres > Clavier > Raccourcis personnalis√©s"
            print_info "2. Ajouter : Nom='Terminal Kitty', Commande='kitty', Raccourci='Super+T'"
            ;;
        fedora)
            print_info "Fedora (GNOME) :"
            print_info "1. Param√®tres > Clavier > Raccourcis de vue"
            print_info "2. Personnaliser les raccourcis > Ajouter un raccourci"
            print_info "3. Nom='Kitty', Commande='kitty', Raccourci='Super+T'"
            ;;
        arch)
            print_info "Arch Linux :"
            print_info "D√©pend de votre environnement de bureau (GNOME/KDE/i3/etc.)"
            print_info "Commande √† assigner : 'kitty'"
            ;;
        *)
            print_info "Configuration g√©n√©rique :"
            print_info "Assigner le raccourci Super+T √† la commande : 'kitty'"
            ;;
    esac
    
    print_info "Alternative via gsettings (GNOME) :"
    echo "gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name 'Kitty'"
    echo "gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command 'kitty'"
    echo "gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding '<Super>t'"
}

# =============================================================================
# FONCTION PRINCIPALE
# =============================================================================

main() {
    print_header
    
    # Initialiser le log
    echo "=== TERMINAL DEV SETUP LOG - LINUX ===" > "$LOG_FILE"
    log "D√©but de l'installation"
    
    # V√©rifications pr√©alables
    check_sudo
    detect_distro
    check_dependencies
    
    print_info "Installation en cours... Consultez $LOG_FILE pour les d√©tails"
    echo ""
    
    # S√©quence d'installation
    install_fonts
    echo ""
    
    install_oh_my_posh
    echo ""
    
    download_themes
    echo ""
    
    install_kitty
    echo ""
    
    configure_kitty
    echo ""
    
    configure_bashrc
    echo ""
    
    set_default_terminal
    echo ""
    
    configure_hotkey
    echo ""
    
    # Finalisation
    print_header
    print_success "Installation termin√©e avec succ√®s !"
    echo ""
    
    # V√©rifications post-installation
    print_info "V√âRIFICATIONS POST-INSTALLATION :"
    
    # V√©rifier Oh My Posh
    if command -v oh-my-posh >/dev/null 2>&1; then
        echo -e "  ${GREEN}‚úì${NC} Oh My Posh install√©"
    else
        echo -e "  ${RED}‚úó${NC} Oh My Posh non trouv√©"
    fi
    
    # V√©rifier Kitty
    if command -v kitty >/dev/null 2>&1; then
        echo -e "  ${GREEN}‚úì${NC} Kitty install√©"
    else
        echo -e "  ${RED}‚úó${NC} Kitty non trouv√©"
    fi
    
    # V√©rifier les polices
    if fc-list | grep -q "JetBrainsMono Nerd Font"; then
        echo -e "  ${GREEN}‚úì${NC} Polices Nerd Font d√©tect√©es"
    else
        echo -e "  ${YELLOW}‚ö†${NC} Polices Nerd Font non d√©tect√©es (red√©marrage peut √™tre n√©cessaire)"
    fi
    
    echo ""
    print_info "PROCHAINES √âTAPES :"
    echo -e "  ${CYAN}1.${NC} ${BOLD}RED√âMARREZ votre session${NC} pour appliquer toutes les configurations"
    echo -e "  ${CYAN}2.${NC} Ou lancez : ${BOLD}source ~/.bashrc && fc-cache -fv${NC}"
    echo -e "  ${CYAN}3.${NC} Configurez le raccourci Super+T manuellement (voir instructions)"
    echo -e "  ${CYAN}4.${NC} Lancez Kitty depuis le lanceur d'applications ou tapez : ${BOLD}kitty${NC}"
    echo -e "  ${CYAN}5.${NC} Votre banni√®re personnalis√©e s'affichera automatiquement"
    echo -e "  ${CYAN}6.${NC} Utilisez ${BOLD}Ctrl+C${NC} et ${BOLD}Ctrl+V${NC} pour copier/coller"
    echo ""
    print_info "Fichiers cr√©√©s :"
    echo -e "  ${DIM}‚Ä¢ Configuration : ~/.config/kitty/kitty.conf${NC}"
    echo -e "  ${DIM}‚Ä¢ Script startup : ~/.config/kitty/startup.sh${NC}"
    echo -e "  ${DIM}‚Ä¢ Configuration : ~/.bashrc (sauvegard√©)${NC}"
    echo -e "  ${DIM}‚Ä¢ Application : ~/.local/share/applications/kitty-custom.desktop${NC}"
    echo -e "  ${DIM}‚Ä¢ Log : $LOG_FILE${NC}"
    echo ""
    
    print_info "Commandes disponibles apr√®s red√©marrage :"
    echo -e "  ${DIM}‚Ä¢ aide - Afficher l'aide${NC}"
    echo -e "  ${DIM}‚Ä¢ ll, gs, ga, gc, gp - Raccourcis utiles${NC}"
    echo -e "  ${DIM}‚Ä¢ proj, web, util, home - Navigation rapide${NC}"
    echo ""
    
    log "Installation Linux termin√©e avec succ√®s"
}

# =============================================================================
# GESTION DES ERREURS
# =============================================================================

trap 'print_error "Installation interrompue"; exit 1' INT TERM

# =============================================================================
# POINT D'ENTR√âE
# =============================================================================

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi